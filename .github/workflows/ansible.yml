name: Build and Deploy Fitness Website

# This workflow runs automatically on any push to the main branch
on:
  push:
    branches:
      - main

jobs:
  # --- JOB 1: Build the Docker image and push it to Docker Hub ---
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Use a standard Linux runner provided by GitHub
    steps:
      # Step 1: Check out the repository code so the runner can access it
      - name: Check out the repo
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub using the secrets you configured
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build the Docker image and push it to your Docker Hub repository.
      # The image is tagged with the unique commit ID (SHA) for versioning.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fitness-app:${{ github.sha }}

  # --- JOB 2: Deploy the new image to your AWS server ---
  deploy:
    name: Deploy to EC2
    needs: build-and-push # This job will only run if the build-and-push job succeeds
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code again for this job
      - name: Check out the repo
        uses: actions/checkout@v4

      # Step 2: Install Ansible on the runner
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      # Step 3: Set up the SSH private key to allow Ansible to connect to your server
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 4: Run the Ansible playbook to deploy the new version
      - name: Run Ansible Playbook
        run: |
          # This command tells Ansible to ignore the host key verification prompt
          export ANSIBLE_HOST_KEY_CHECKING=False
          
          # This runs the playbook and passes the new, unique image tag as a variable
          # ansible-playbook -i inventory.ini playbook.yml --extra-vars "docker_image=${{ secrets.DOCKERHUB_USERNAME }}/fitness-app:${{ github.sha }}"
          ansible-playbook -i inventory.ini playbook.yml

